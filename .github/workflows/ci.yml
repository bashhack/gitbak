name: CI Pipeline

on:
  push:
    branches: [ main ]  # Only run on pushes to main
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]  # Run on PRs to main

jobs:
  test-go:
    name: Test Go Implementation
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # Continue with other jobs if one fails
      matrix:
        os: [ubuntu-latest, macos-latest]
        go-version: ['1.24']
    defaults:
      run:
        working-directory: ./go

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Install staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b "$(go env GOPATH)/bin" v2.1.6
          golangci-lint --version

      - name: Run linters
        run: make lint

      - name: Run unit tests and generate coverage
        run: |
          GOMAXPROCS=$(nproc 2>/dev/null || sysctl -n hw.logicalcpu 2>/dev/null || echo 4) make test
          make coverage

      - name: Run tests with race detection
        run: |
          CORES=$(nproc 2>/dev/null || sysctl -n hw.logicalcpu 2>/dev/null || echo 4)
          RACE_CORES=$([ $CORES -gt 4 ] && echo 4 || echo $CORES)
          GOMAXPROCS=$RACE_CORES go test -race -tags=test ./...

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: go-coverage-report-${{ matrix.os }}
          path: ./go/coverage.html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./go/coverage.txt
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Run integration tests
        run: |
          export GITBAK_INTEGRATION_TESTS=1
          make test/integration

      - name: Build for all platforms
        run: make build/all

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: gitbak-binaries-${{ matrix.os }}
          path: ./go/build/bin/*
          if-no-files-found: error

  test-shell:
    name: Test Shell Script Implementation
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # Continue with other jobs if one fails
      matrix:
        os: [ubuntu-latest, macos-latest]
    defaults:
      run:
        working-directory: ./sh

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            sudo apt-get update
            sudo apt-get install -y shellcheck parallel
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            brew install shellcheck parallel
          fi

      - name: Run shellcheck
        run: |
          shellcheck gitbak.sh
          shellcheck tests/*.sh

      - name: Configure Git for tests
        run: |
          git config --global user.name "GitBak Test"
          git config --global user.email "gitbak-test@example.com"
          echo "Configured git user identity for testing"

      - name: Run all shell tests
        run: |
          cd tests
          ./shell_compatibility.sh
          ./basic_functionality.sh
          ./lock_file.sh
          ./continuation.sh
          ./stress_test.sh

  update-pkg-go-dev:
    name: Update pkg.go.dev Documentation
    runs-on: ubuntu-latest
    needs: [test-go, test-shell]
    if: github.ref == 'refs/heads/main' # Only run on main branch

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Trigger pkg.go.dev update
        run: |
          # This makes a request to pkg.go.dev to trigger a refresh of the documentation
          # It doesn't actually "push" anything, it just asks pkg.go.dev to rescan the repository
          curl -sSL "https://proxy.golang.org/github.com/bashhack/gitbak/@v/$(git describe --tags --abbrev=0).info"

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test-go, test-shell]
    if: startsWith(github.ref, 'refs/tags/v')

    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
          workdir: ./go
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Package shell script for release
        working-directory: ./sh
        run: |
          # Ensure scripts are executable
          chmod +x gitbak.sh install.sh

          # Create a directory with the release tag name
          mkdir -p gitbak-shell

          # Copy required files
          cp gitbak.sh README.md install.sh gitbak-shell/

          # Create tar.gz archive
          tar -czf gitbak-shell.tar.gz gitbak-shell

          echo "Shell script packaged for release"

      - name: Upload shell script package
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # Specify tag name to ensure it attaches to the same release GoReleaser created
          tag_name: ${{ github.ref_name }}
          files: |
            ./sh/gitbak-shell.tar.gz
            ./sh/install.sh
          # Disable GitHub's auto-generated notes since GoReleaser already creates them
          generate_release_notes: false
          # Mark as prerelease for alpha/beta/rc versions
          prerelease: ${{ contains(github.ref, '-alpha') || contains(github.ref, '-beta') || contains(github.ref, '-rc') }}
