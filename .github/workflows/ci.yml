name: CI Pipeline

on:
  push:
    branches: [ main ]  # Only run on pushes to main
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]  # Run on PRs to main

jobs:
  test-go:
    name: Test Go Implementation
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # Continue with other jobs if one fails
      matrix:
        os: [ubuntu-latest, macos-latest]
        go-version: ['1.24']
    defaults:
      run:
        working-directory: ./go

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Install dependencies
        run: go mod download

      - name: Install staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b "$(go env GOPATH)/bin" v2.1.6
          golangci-lint --version

      - name: Run linters
        run: make lint

      - name: Run unit tests and generate coverage
        run: |
          GOMAXPROCS=$(nproc 2>/dev/null || sysctl -n hw.logicalcpu 2>/dev/null || echo 4) make test
          make coverage

      - name: Run tests with race detection
        run: |
          CORES=$(nproc 2>/dev/null || sysctl -n hw.logicalcpu 2>/dev/null || echo 4)
          RACE_CORES=$([ $CORES -gt 4 ] && echo 4 || echo $CORES)
          GOMAXPROCS=$RACE_CORES go test -race -tags=test ./...

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: go-coverage-report-${{ matrix.os }}
          path: ./go/coverage.html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./go/coverage.txt
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Run integration tests
        run: |
          export GITBAK_INTEGRATION_TESTS=1
          make test/integration

      - name: Build for all platforms
        run: make build/all

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: gitbak-binaries-${{ matrix.os }}
          path: ./go/build/bin/*
          if-no-files-found: error


  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test-go]
    if: github.ref_type == 'tag'

    # Note: This job requires a 'RELEASE_TOKEN' secret (a personal access token with 'repo' permissions)
    # The token allows GitHub release creation to trigger subsequent workflow runs
    
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
          workdir: ./go
        env:
          # Using RELEASE_TOKEN to enable workflow triggers
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}

      - name: Package shell script for historical reference
        working-directory: ./sh
        run: |
          # Ensure scripts are executable
          chmod +x gitbak.sh install.sh

          # Create a directory with the release tag name
          mkdir -p gitbak-shell

          # Copy required files
          cp gitbak.sh README.md install.sh gitbak-shell/

          # Create tar.gz archive
          tar -czf gitbak-shell.tar.gz gitbak-shell

          echo "Shell script packaged for historical reference (unsupported)"

      - name: Upload shell script package
        uses: softprops/action-gh-release@v2
        with:
          # Using the same RELEASE_TOKEN for consistency
          token: ${{ secrets.RELEASE_TOKEN }}
          # Specify tag name to ensure it attaches to the same release GoReleaser created
          tag_name: ${{ github.ref_name }}
          files: |
            ./sh/gitbak-shell.tar.gz
            ./sh/install.sh
          # Disable GitHub's auto-generated notes since GoReleaser already creates them
          generate_release_notes: false
          # Mark as prerelease for alpha/beta/rc versions
          prerelease: ${{ contains(github.ref, '-alpha') || contains(github.ref, '-beta') || contains(github.ref, '-rc') }}
